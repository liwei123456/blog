https://blog.csdn.net/qq_33524158/article/details/80671054
微服务
Dubbo 和 Spring Cloud
一：调用方式
dubbo使用Rpc协议。
Spring Cloud使用restfull的api。
一：注册中心
1：ZooKeeper 其实就是保证数据的一致性的一种解决方案。
使用ZooKeeper主要是做服务的注册中心，生产者服务注册到这个注册中心，
服务的消费者去调用服务的时候，会先从注册中心去查找服务，查找到生产者服务后获取生产者服务返回的数据。
2：spring cloud的eureka和上面功能类似
二：负载均衡
硬件负载均衡：
比如：F5
软件负载均衡分2种：
服务器负载均衡：
1：Nginx是著名的反向代理服务器，也被广泛的作为负载均衡服务器。
1）正向代理：A向C借钱，但是由于一些情况不能直接借到钱，于是通过B来借到钱。
比如：正向代理为多个人提供翻墙服务。
应用：访问原来无法访问的资源。
2）方向代理：A向B借钱，但是B却悄悄向C借钱，然后再把钱借给A。
比如：百度外卖为多个商户提供外卖服务。
应用：保护内网安全，负载均衡，缓存，减少服务器压力
客户端负载均衡：
1：ZooKeeper可以做负载均衡，但是没有内置负载均衡策略，需要调用者自己实现。
2：注册的服务之间是如何调用的，是如何进行负载均衡的，一般是使用Ribbon/Feign客户端负载均衡器，他们的
负载是服务之间的负载。
应用场景，如果把solr用作集群的时候，每个服务不会只用一台服务器，那么就需要使用负载均衡。
因为solr主要是读，所以这样性能就比较高，写的话应该会导致所有的服务器同步，变慢。
三：服务路由
zuul：zuul也有负载均衡的功能，它是针对外部请求做负载。
四：服务断熔器Hystrix
服务断熔：一般是某个服务故障或异常引起，类似“保险丝”，当某个异常被触发，
直接熔断整个服务，而不是等到此服务超时。
服务降级：如果熔断以后，准备一个本地的fallback回调，比直接挂掉要好。
五：消息队列MQ
为什么要使用消息队列？
异步：将耗时的同步操作，通过以发送消息的方式，进行了异步化处理。减少了同步等待的时间。
比如：发邮件的功能，一个线程发送一份邮件，我做了同步处理，那么其他线程就会在等待中。
解耦：解决串行的并行化。
比如：有多个业务系统，但是他们直接是没有顺序的，可以通过消息队列进行转发做到解耦。
削峰：系统A慢慢的按照数据库能处理的并发量，从消息队列中慢慢拉取消息。
比如：双11购买，数据库承受不住那么多的并非量，让用户过一会再刷新处理，避开高峰期。
消息队列的选型？
ActiveMQ：
RabbitMQ：
1：交换机
消息->路由->队列
路由绑定队列关键字，有3中路由：
RocketMQ
Kafka
